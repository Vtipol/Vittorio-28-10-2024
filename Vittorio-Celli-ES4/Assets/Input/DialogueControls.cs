//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/DialogueControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DialogueControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DialogueControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DialogueControls"",
    ""maps"": [
        {
            ""name"": ""Text"",
            ""id"": ""6a732635-1f44-456f-a747-6518953974e1"",
            ""actions"": [
                {
                    ""name"": ""AdvanceDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""18950010-5b52-4675-ab51-7a9da0f392e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""105314a4-5c21-4505-8062-a2c4fc948cdd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""a26517df-3a01-487b-9d72-7cee83dda1fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8848a56a-59ff-4b35-b6f5-76a7cdcb87b7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdvanceDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7366ac0-f86c-4f92-99a7-57c9c1d1702c"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e31a45e-8fde-4e49-b4dc-ae0d0a951665"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Text
        m_Text = asset.FindActionMap("Text", throwIfNotFound: true);
        m_Text_AdvanceDialogue = m_Text.FindAction("AdvanceDialogue", throwIfNotFound: true);
        m_Text_BackDialogue = m_Text.FindAction("BackDialogue", throwIfNotFound: true);
        m_Text_SkipDialogue = m_Text.FindAction("SkipDialogue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Text
    private readonly InputActionMap m_Text;
    private List<ITextActions> m_TextActionsCallbackInterfaces = new List<ITextActions>();
    private readonly InputAction m_Text_AdvanceDialogue;
    private readonly InputAction m_Text_BackDialogue;
    private readonly InputAction m_Text_SkipDialogue;
    public struct TextActions
    {
        private @DialogueControls m_Wrapper;
        public TextActions(@DialogueControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AdvanceDialogue => m_Wrapper.m_Text_AdvanceDialogue;
        public InputAction @BackDialogue => m_Wrapper.m_Text_BackDialogue;
        public InputAction @SkipDialogue => m_Wrapper.m_Text_SkipDialogue;
        public InputActionMap Get() { return m_Wrapper.m_Text; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TextActions set) { return set.Get(); }
        public void AddCallbacks(ITextActions instance)
        {
            if (instance == null || m_Wrapper.m_TextActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TextActionsCallbackInterfaces.Add(instance);
            @AdvanceDialogue.started += instance.OnAdvanceDialogue;
            @AdvanceDialogue.performed += instance.OnAdvanceDialogue;
            @AdvanceDialogue.canceled += instance.OnAdvanceDialogue;
            @BackDialogue.started += instance.OnBackDialogue;
            @BackDialogue.performed += instance.OnBackDialogue;
            @BackDialogue.canceled += instance.OnBackDialogue;
            @SkipDialogue.started += instance.OnSkipDialogue;
            @SkipDialogue.performed += instance.OnSkipDialogue;
            @SkipDialogue.canceled += instance.OnSkipDialogue;
        }

        private void UnregisterCallbacks(ITextActions instance)
        {
            @AdvanceDialogue.started -= instance.OnAdvanceDialogue;
            @AdvanceDialogue.performed -= instance.OnAdvanceDialogue;
            @AdvanceDialogue.canceled -= instance.OnAdvanceDialogue;
            @BackDialogue.started -= instance.OnBackDialogue;
            @BackDialogue.performed -= instance.OnBackDialogue;
            @BackDialogue.canceled -= instance.OnBackDialogue;
            @SkipDialogue.started -= instance.OnSkipDialogue;
            @SkipDialogue.performed -= instance.OnSkipDialogue;
            @SkipDialogue.canceled -= instance.OnSkipDialogue;
        }

        public void RemoveCallbacks(ITextActions instance)
        {
            if (m_Wrapper.m_TextActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITextActions instance)
        {
            foreach (var item in m_Wrapper.m_TextActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TextActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TextActions @Text => new TextActions(this);
    public interface ITextActions
    {
        void OnAdvanceDialogue(InputAction.CallbackContext context);
        void OnBackDialogue(InputAction.CallbackContext context);
        void OnSkipDialogue(InputAction.CallbackContext context);
    }
}
